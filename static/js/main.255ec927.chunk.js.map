{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","clearTodosDataAC","todolistsReducer","removeTaskAC","indexTL","indexTask","addTaskAC","todoListId","updateTaskAC","setTasksAC","tasks","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","task","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","thunk","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","err","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","fontSize","textAlign","from","top","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.255ec927.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'aaa63ed6-139f-4a73-aa64-3185c5225bcd'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>\r\n        (`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>\r\n        (`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n       /* Варианты типизации дженериков axios\r\n          return instance.post<LoginParamsType, {data: ResponseType<{ userId: number }>\r\n      }>(`auth/login`, data) или: */\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<ResponseMeDataType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type ResponseMeDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    // dispatch(setAppErrorAC(error.message ? {error: error.message} : {error:'Some error occurred'})) или:\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {ClearDataActionType, clearTodosDataAC} from \"../TodolistsList/todolists-reducer\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\nexport const authReducer = slice.reducer\r\n// const setIsLoggedInAC = slice.actions.setIsLoggedInAC или деструктуризацией:\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.login(data).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((err) => handleServerNetworkError(err.message, dispatch))\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.logout().then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n            dispatch(setIsLoggedInAC({value: false}))\r\n            dispatch(clearTodosDataAC())\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((err) => handleServerNetworkError(err.message, dispatch))\r\n}\r\n\r\n// types\r\n/*\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type SetAppErrorACType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>\r\ntype ActionsType = setIsLoggedInACType | SetAppStatusACType | SetAppErrorACType | ClearDataActionType*/\r\nexport type setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>","import {Dispatch} from \"redux\"\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsLoggedInAC} from \"../features/login/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false,\r\n}\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const {setAppErrorAC,setAppStatusAC,setIsInitializedAC} = slice.actions\r\n/*export const {setAppStatusAC} = slice.actions\r\nexport const {setIsInitializedAC} = slice.actions*/\r\n\r\n//Thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch,)\r\n        }\r\n    })\r\n        .catch((err) => handleServerNetworkError(err.message, dispatch,))\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n//Types\r\nexport type isInitializedACType = ReturnType<typeof setIsInitializedAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            // state.push({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n          clearTodosDataAC(state, action: PayloadAction) {},\r\n    }\r\n})\r\n\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    clearTodosDataAC, setTodolistsAC, removeTodolistAC, addTodolistAC, changeTodolistTitleAC,\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC\r\n} = slice.actions\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type ClearDataActionType = ReturnType<typeof clearTodosDataAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    addTodolistAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC,\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const indexTL = state[action.payload.todolistId]\r\n            const indexTask = indexTL.findIndex(tl => tl.id == action.payload.taskId)\r\n            if (indexTask > -1) {//проверка нашлось ли совпадение\r\n                indexTL.splice(indexTask, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{\r\n            taskId: string, model: UpdateDomainTaskModelType, todolistId: string\r\n        }>) {\r\n            const indexTL = state[action.payload.todolistId]\r\n            const indexTask = indexTL.findIndex(tl => tl.id == action.payload.taskId)\r\n            if (indexTask > -1) {//проверка нашлось ли совпадение\r\n                indexTL[indexTask] = {...indexTL[indexTask], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n//через объект:придется прокидывать типизацию экшенов, при изменении типизации\r\n// АС в своем reducer здесь ошибку не покажет\r\n/* extraReducers: {\r\n     [addTodolistAC.type]: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n         state[action.payload.todolist.id] = []\r\n     },\r\n     [removeTodolistAC.type]: (state, action: PayloadAction<{ id: string }>) => {\r\n         delete state[action.payload.id]\r\n     },\r\n     [setTodolistsAC.type]: (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {\r\n         action.payload.todolists.forEach((tl: any) => {\r\n             state[tl.id] = []\r\n         })\r\n     },\r\n }*/\r\n\r\nexport const tasksReducer = slice.reducer\r\n// export actions\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n\r\n\r\nexport const TodolistsList = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id:todolistId,filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error:null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport { Login } from '../features/login/Login'\r\nimport {logoutTC} from \"../features/login/auth-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\n\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'}\r\n                           render={() => <h1 style={{fontSize: '50px', textAlign: 'center'}}>404: PAGE NOT\r\n                               FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\nimport {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth:authReducer,\r\n})\r\n\r\n//store:redux-toolkit\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware:getDefaultMiddleware=>getDefaultMiddleware().prepend(thunkMiddleware)\r\n});\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter basename={'TodoLists'}>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}